Behaviour collection:
- internal functions calls of target app
	a) Java
	b) native code ('.so' files)

- middleware with focus on interaction with target app; we want to be able to capture:
	a) calls of MW to system services via IPC (e.g. to Telephony service)
	b) sending of intents and broadcasts to other apps / services (e.g. deliver payload via intents)
	c) delivery of (result) messages to MW (e.g. also intercepted broadcasts / intents)

- network traffic
	a) from MW
	b) to MW

=> Output: trace file(s) + network traffic file(s)

Notes:
	- maybe setting up VPN on-device might be useful for collecting only network data related to MW
	- different approaches for function tracing:
		> system patching (AOSP)
		> inline hooks via app rewriting (e.g. like AppGuard)
		> inline hooks via Artist use (at compile time)
		more?

*****************

App exploration:
- each (statically) defined app component (activity, service, brdc.receiver, content resolver) should be started / interacted with at least once

- starting from main activity, app behaviour should be automatically explored by interacting with the GUI elements:
	a) button press
	b) enter into text field
	more?

TODO: what about dynamically registered b.receivers?
TODO: native code interfaces / APIs?

Notes: 
	- checkout DroidMate library - (https://github.com/konrad-jamrozik/droidmate)
	- checkout CLI tools for starting components (am / pm utils)
	- checkout tools like Androguard for extracting entry points from AndroidManifest

*****************

Stealthiness:
- should bypass anti-analysis techniques of a provided MW sample set

- remove emulator environment / config options (e.g. debug build noted in properties)

- deal at least with subset of common sensors

- emulator should probably have some user data:
	> common / vulnerable apps installed
	> contacts, fotos
	> accounts (e.g. mail)
	> other possible user data

TODO: come up with overview about common anti-analysis techniques specific to Android/mobile MW?

*****************

Documentation:
- provide PDF with (high-level) documentation for all the different components w.r.t.:
	a) their purpose and how they fulfill it

	b) (critical/difficult) problems that arised during development and your solution(s) for them

	c) interaction with other components

- PROJECT DOCUMENTATION(!)
	a) meaningful function, variable, (class) names

	b) at least 1-2 sentences docstring per function which briefly states its purpose, the meaning of input arguments and interpretation of output/return value

	c) overview file which describes the folder / file hierarchy of the project;
	e.g.:
		- explorer/		- contains source code of GUI explorer component

		- utils/ 		- contains common helper functions

		- setup.sh 		- fetches and installs third-party dependencies

		...

*****************

Misc:
- management code (start emulator, load APK, run APK, etc.) should be somehow callable via Python (e.g. implement in Python; provide Python bindings; uglier: CLI)

