// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org
/*
  This project contains classes reused by multiple projects, some of which are run on an Android device.
  Because some of them are run on an Android Device, the classes in this project have to be compiled with Java 7, not Java 8.
  
  Even though this project uses Groovy, it can still run on Android Device. Not sure why, maybe because at runtime there are no
  direct calls to methods from Groovy SDK.
*/

import com.konradjamrozik.IterableExtensions
import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'
apply plugin: 'project-report'

/* 
   This project has to be built with Java 7. Otherwise the ant call from :projects:monitor-generator:buildMonitorApk task:
   
     ant -f repo/dev/droidmate/projects/monitor-generator/monitor-apk-scaffolding/build.xml debug
     
   fails with:

       [dx] UNEXPECTED TOP-LEVEL EXCEPTION:
       [dx] com.android.dx.cf.iface.ParseException: bad class file magic (cafebabe) or version (0034.0000)
*/
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
compileGroovy.configure { GroovyCompile gc ->
  // See explanation of this in build.gradle of 'monitor-template' project.
  gc.options.compilerArgs += "-Xlint:-options"
}

dependencies {

  compile("com.github.konrad-jamrozik:utilities:$utilities_version") {
    exclude group: "org.slf4j", module: "slf4j-simple"
  }

  compile 'org.codehaus.groovy:groovy-all:2.4.10'

  compile 'org.apache.commons:commons-exec:1.2'
  compile 'org.apache.commons:commons-lang3:3.3'
  compile 'commons-io:commons-io:2.4'

  compile 'net.sf.jopt-simple:jopt-simple:4.9'

  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'

  compile 'com.google.guava:guava:19.0'

  compile 'com.google.jimfs:jimfs:1.0'

  testCompile 'junit:junit:4.12'
}

File resDir = IterableExtensions.findSingle(sourceSets.main.resources.srcDirs)
File buildConstantsFile = new File(resDir, "buildConstants.properties")

task writeBuildConstantsProperties() { Task it ->

  it.outputs.file(buildConstantsFile)

  doLast {

    // Map constants used in both Gradle build scripts and in the compiled classes to a resource file. This way the constants will
    // be available to the compiled classes in a stand-alone deployment, without the gradle build scripts.
    //
    // Do not use Groovy map initializer syntax to define the map due to a known issue: 
    // https://youtrack.jetbrains.com/issue/IDEA-155257
    //
    Map<String, String> map = [:]
    map["apk_inliner_param_input"] = BuildKt.apk_inliner_param_input
    map["apk_inliner_param_output_dir"] = BuildKt.apk_inliner_param_output_dir
    map["apk_inliner_param_input_default"] = BuildKt.apk_inliner_param_input_default.toString()
    map["apk_inliner_param_output_dir_default"] = BuildKt.apk_inliner_param_output_dir_default.toString()
    map["AVD_dir_for_temp_files"] = BuildKt.AVD_dir_for_temp_files
    map["jarsigner_relative_path"] = BuildKt.jarsigner_relative_path
    map["apk_fixtures"] = BuildKt.apk_fixtures
    map["monitored_inlined_apk_fixture_api19_name"] = BuildKt.monitored_inlined_apk_fixture_api19_name
    map["monitored_inlined_apk_fixture_api23_name"] = BuildKt.monitored_inlined_apk_fixture_api23_name
    map["monitor_generator_output_relative_path_api19"] = BuildKt.monitor_generator_output_relative_path_api19
    map["monitor_generator_output_relative_path_api23"] = BuildKt.monitor_generator_output_relative_path_api23
    map["test_temp_dir_name"] = BuildKt.test_temp_dir_name
    map["monitored_apis_txt"] = BuildKt.monitored_apis_txt
    map["dir_name_temp_extracted_resources"] = BuildKt.dir_name_temp_extracted_resources
    map["monitor_generator_res_name_monitor_template"] = BuildKt.monitor_generator_res_name_monitor_template
    map["aapt_command_relative"] = BuildKt.aapt_command_relative
    map["adb_command_relative"] = BuildKt.adb_command_relative
    map["monitor_on_avd_apk_name"] = BuildKt.monitor_on_avd_apk_name
    map["monitor_api19_apk_name"] = BuildKt.monitor_api19_apk_name
    map["monitor_api23_apk_name"] = BuildKt.monitor_api23_apk_name
    map["locale"] = BuildKt.locale.toString()

    buildConstantsFile.withWriter {BufferedWriter wr ->
      map.each {key, value ->
        wr.writeLine(key + "=" + value)
      }
    }
  }
}

task cleanConstantsFile(type: Delete) {
  delete file(buildConstantsFile)
}

clean.dependsOn "cleanConstantsFile"

processResources.dependsOn("writeBuildConstantsProperties")

configureTest(project, ['**/LibCommonTestSuite.class'])

task testi(type: Test, dependsOn: "testClasses") { Test it ->
  it.group = "verification"
  it.description = "Interactive test"
  it.outputs.upToDateWhen { false }
  it.filter.includeTest "*BuildConstantsTest", "*"
}

apply from: project(":projects").file("maven.gradle")
