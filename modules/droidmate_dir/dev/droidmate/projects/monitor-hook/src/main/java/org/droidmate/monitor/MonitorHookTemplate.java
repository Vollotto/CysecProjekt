// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org

package org.droidmate.monitor;

import android.content.Context;

// !!!!! =================================================================
// !!!!! DO NOT EDIT THIS FILE !!!
// !!!!! =================================================================
// !!!!! Instead, run full gradle rebuild (see README.md) or do:
// !!!!! 
// !!!!!   cd repo/droidmate/dev/droidmate 
// !!!!!   ./gradlew :projects:monitor-hook:compileJava 
// !!!!! 
// !!!!! This will generate MonitorHook.java in the same directory as this class. Edit that file instead.
// !!!!! You can edit MonitorHook.java, as it will not be regenerated if it already exists. 
// !!!!! Thus your changes to it will be retained. 

/**
 * <p>Please see {@link MonitorHookExample} for an example implementation. Please see comments marked with !!!!! in this file 
 * to understand how to use this class to implement your own {@link IMonitorHook}.</p> 
 */
// These warnings are suppressed because this class is only a stub of an actual implementation.
@SuppressWarnings({"unused", "Duplicates", "FieldCanBeLocal", "WeakerAccess"})
public class MonitorHookTemplate implements IMonitorHook
{

  public void init(Context context) 
  {
  }

  public void hookBeforeApiCall(String apiLogcatMessagePayload)
  {
  }

  public Object hookAfterApiCall(String apiLogcatMessagePayload, Object returnValue)
  {
    return returnValue;
  }

  public void finalizeMonitorHook()
  {
  }
}

